import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from mhkit.wave.resource import significant_wave_height as _sig_wave_height
from mhkit.wave.resource import peak_period as _peak_period
from mhkit.river.graphics import _xy_plot
from matplotlib import gridspec
from matplotlib import pylab


def plot_spectrum(S, ax=None):
    """
    Plots wave amplitude spectrum versus omega

    Parameters
    ------------
    S: pandas DataFrame
        Spectral density [m^2/Hz] indexed frequency [Hz]
    ax : matplotlib axes object
        Axes for plotting.  If None, then a new figure is created.
    Returns
    ---------
    ax : matplotlib pyplot axes

    """
    assert isinstance(S, pd.DataFrame), 'S must be of type pd.DataFrame'

    f = S.index

    ax = _xy_plot(f*2*np.pi, S/(2*np.pi), fmt='-', xlabel='omega [rad/s]',
             ylabel='Spectral density [m$^2$s/rad]', ax=ax)


    return ax

def plot_elevation_timeseries(eta, ax=None):
    """
    Plot wave surface elevation time-series

    Parameters
    ------------
    eta: pandas DataFrame
        Wave surface elevation [m] indexed by time [datetime or s]
    ax : matplotlib axes object
        Axes for plotting.  If None, then a new figure is created.

    Returns
    ---------
    ax : matplotlib pyplot axes

    """

    assert isinstance(eta, pd.DataFrame), 'eta must be of type pd.DataFrame'

    ax = _xy_plot(eta.index, eta, fmt='-', xlabel='Time',
                  ylabel='$\eta$ [m]', ax=ax)

    return ax

def plot_matrix(M, xlabel='Te', ylabel='Hm0', zlabel=None, show_values=True,
                ax=None):
    """
    Plots values in the matrix as a scatter diagram
    
    Parameters
    ------------
    M: pandas DataFrame
        Matrix with numeric labels for x and y axis, and numeric entries.
        An example would be the average capture length matrix generated by
        mhkit.device.wave, or something similar.
    xlabel: string (optional)
        Title of the x-axis
    ylabel: string (optional)
        Title of the y-axis
    zlabel: string (optional)
        Colorbar label
    show_values : bool (optional)
        Show values on the scatter diagram
    ax : matplotlib axes object
        Axes for plotting.  If None, then a new figure is created.

    Returns
    ---------
    ax : matplotlib pyplot axes

    """
    
    assert isinstance(M, pd.DataFrame), 'M must be of type pd.DataFrame'

    if ax is None:
        plt.figure()
        ax = plt.gca()

    im = ax.imshow(M, origin='lower', aspect='auto')

    # Add colorbar
    cbar = plt.colorbar(im)
    if zlabel:
        cbar.set_label(zlabel, rotation=270, labelpad=15)

    # Set x and y label
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)

    # Show values in the plot
    if show_values:
        for i, col in enumerate(M.columns):
            for j, index in enumerate(M.index):
                if not np.isnan(M.loc[index,col]):
                    ax.text(i, j, format(M.loc[index,col], '.2f'), ha="center", va="center")

    # Reset x and y ticks
    ax.set_xticks(np.arange(len(M.columns)))
    ax.set_yticks(np.arange(len(M.index)))
    ax.set_xticklabels(M.columns)
    ax.set_yticklabels(M.index)

    return ax


def plot_chakrabarti(H, lambda_w, D, ax=None):
    """
    Plots, in the style of Chakrabart (2005), relative importance of viscous,
    inertia, and diffraction phemonena

    Chakrabarti, Subrata. Handbook of Offshore Engineering (2-volume set).
    Elsevier, 2005.

    Parameters
    ------------
    H: float or numpy array or pandas Series
        Wave height [m]
    lambda_w: float or numpy array or pandas Series
        Wave length [m]
    D: float or numpy array or pandas Series
        Characteristic length [m]
    ax : matplotlib axes object (optional)
        Axes for plotting.  If None, then a new figure is created.


    Returns
    ---------
    ax : matplotlib pyplot axes

    Examples
    --------
    **Using floats**

    >>> plt.figure()
    >>> D = 5
    >>> H = 8
    >>> lambda_w = 200
    >>> wave.graphics.plot_chakrabarti(H, lambda_w, D)

    **Using numpy array**

    >>> plt.figure()
    >>> D = np.linspace(5,15,5)
    >>> H = 8*np.ones_like(D)
    >>> lambda_w = 200*np.ones_like(D)
    >>> wave.graphics.plot_chakrabarti(H, lambda_w, D)

    **Using pandas DataFrame**

    >>> plt.figure()
    >>> D = np.linspace(5,15,5)
    >>> H = 8*np.ones_like(D)
    >>> lambda_w = 200*np.ones_like(D)
    >>> df = pd.DataFrame([H.flatten(),lambda_w.flatten(),D.flatten()], \
                              index=['H','lambda_w','D']).transpose()
    >>> wave.graphics.plot_chakrabarti(df.H, df.lambda_w, df.D)
    """
    assert isinstance(H, (np.ndarray, float, int, np.int64,pd.Series)), \
           'H must be a real numeric type'
    assert isinstance(lambda_w, (np.ndarray, float, int, np.int64,pd.Series)), \
           'lambda_w must be a real numeric type'
    assert isinstance(D, (np.ndarray, float, int, np.int64,pd.Series)), \
           'D must be a real numeric type'

    if any([(isinstance(H, np.ndarray) or isinstance(H, pd.Series)),        \
            (isinstance(lambda_w, np.ndarray) or isinstance(H, pd.Series)), \
            (isinstance(D, np.ndarray) or isinstance(H, pd.Series))\
           ]):
        errMsg = 'D, H, and lambda_w must be same shape'
        n_H = H.squeeze().shape
        n_lambda_w = lambda_w.squeeze().shape
        n_D = D.squeeze().shape
        assert n_H == n_lambda_w and n_H == n_D, errMsg

        if isinstance(H, np.ndarray):
            mvals = pd.DataFrame(H.reshape(len(H),1), columns=['H'])
            mvals['lambda_w'] = lambda_w
            mvals['D'] = D
        elif isinstance(H, pd.Series):
            mvals = pd.DataFrame(H)
            mvals['lambda_w'] = lambda_w
            mvals['D'] = D

    else:
        H = np.array([H])
        lambda_w = np.array([lambda_w])
        D = np.array([D])
        mvals = pd.DataFrame(H.reshape(len(H),1), columns=['H'])
        mvals['lambda_w'] = lambda_w
        mvals['D'] = D

    if ax is None:
        plt.figure()
        ax = plt.gca()

    ax.set_xscale('log')
    ax.set_yscale('log')

    for index, row in mvals.iterrows():
        H = row.H
        D = row.D
        lambda_w = row.lambda_w
        
        KC = H / D
        Diffraction = np.pi*D / lambda_w
        label = f'$H$ = {H:g}, $\lambda_w$ = {lambda_w:g}, $D$ = {D:g}'
        ax.plot(Diffraction, KC, 'o', label=label)
   
    if np.any(KC>=10 or KC<=.02) or np.any(Diffraction>=50) or \
        np.any(lambda_w >= 1000) :
        ax.autoscale(enable=True, axis='both', tight=True)  
    else:
        ax.set_xlim((0.01, 10))
        ax.set_ylim((0.01, 50))

    graphScale = list(ax.get_xlim())
    if graphScale[0] >= .01:
        graphScale[0] =.01

    # deep water breaking limit (H/lambda_w = 0.14)
    x = np.logspace(1,np.log10(graphScale[0]), 2)
    y_breaking = 0.14 * np.pi / x
    ax.plot(x, y_breaking, 'k-')
    graphScale = list(ax.get_xlim())
    
    ax.text(1, 7, 
            'wave\nbreaking\n$H/\lambda_w > 0.14$', 
            ha='center', va='center', fontstyle='italic', 
            fontsize='small',clip_on='True')

    # upper bound of low drag region
    ldv = 20
    y_small_drag = 20*np.ones_like(graphScale)
    graphScale[1] = 0.14 * np.pi / ldv
    ax.plot(graphScale, y_small_drag,'k--')
    ax.text(0.0125, 30, 
            'drag', 
            ha='center', va='top', fontstyle='italic',
            fontsize='small',clip_on='True')
            
    # upper bound of small drag region
    sdv = 1.5
    y_small_drag = sdv*np.ones_like(graphScale)
    graphScale[1] = 0.14 * np.pi / sdv
    ax.plot(graphScale, y_small_drag,'k--')
    ax.text(0.02, 7, 
            'inertia \n& drag', 
            ha='center', va='center', fontstyle='italic', 
            fontsize='small',clip_on='True')

    # upper bound of negligible drag region
    ndv = 0.25
    graphScale[1] = 0.14 * np.pi / ndv
    y_small_drag = ndv*np.ones_like(graphScale)
    ax.plot(graphScale, y_small_drag,'k--')
    ax.text(8e-2, 0.7, 
            'large\ninertia', 
            ha='center', va='center', fontstyle='italic', 
            fontsize='small',clip_on='True')


    ax.text(8e-2, 6e-2, 
            'all\ninertia', 
            ha='center', va='center', fontstyle='italic', 
            fontsize='small', clip_on='True')

    # left bound of diffraction region
    drv = 0.5
    graphScale = list(ax.get_ylim())
    graphScale[1] = 0.14 * np.pi / drv
    x_diff_reg = drv*np.ones_like(graphScale)
    ax.plot(x_diff_reg, graphScale, 'k--')
    ax.text(2, 6e-2, 
            'diffraction', 
            ha='center', va='center', fontstyle='italic',
            fontsize='small',clip_on='True')


    if index > 0:
        ax.legend(fontsize='xx-small', ncol=2)

    ax.set_xlabel('Diffraction parameter, $\\frac{\\pi D}{\\lambda_w}$')
    ax.set_ylabel('KC parameter, $\\frac{H}{D}$')

    plt.tight_layout()

def plot_environmental_contour(x1, x2, x1_contour, x2_contour, **kwargs):
    '''
    Plots an overlay of the x1 and x2 variables to the calculate
    environmental contours.

    Parameters
    ----------
    x1: numpy array  
        x-axis data
    x2: numpy array 
        x-axis data
    x1_contour: numpy array 
        Calculated x1 contour values
    x2_contour: numpy array 
        Calculated x2 contour values 
    **kwargs : optional         
        x_label: string (optional)
            x-axis label. Default None. 
        y_label: string (optional)
            y-axis label. Default None.
        data_label: string (optional)
            Legend label for x1, x2 data (e.g. 'Buoy 46022'). 
            Default None.
        contour_label: string or list of strings (optional)
            Legend label for x1_contour, x2_contour countor data 
            (e.g. '100-year contour'). Default None.
        ax : matplotlib axes object (optional)
            Axes for plotting.  If None, then a new figure is created.
            Default None.

    Returns
    -------
    ax : matplotlib pyplot axes
    '''
    
    assert isinstance(x1, np.ndarray), 'x1 must be of type np.ndarray'
    assert isinstance(x2, np.ndarray), 'x2 must be of type np.ndarray'
    assert isinstance(x1_contour, np.ndarray), ('x1_contour must be of '
                                                'type np.ndarray')
    assert isinstance(x2_contour, np.ndarray), ('x2_contour must be of '
                                               'type np.ndarray')
    x_label = kwargs.get("x_label", None)
    y_label = kwargs.get("y_label", None)
    data_label=kwargs.get("data_label", None)
    contour_label=kwargs.get("contour_label", None)
    ax=kwargs.get("ax", None)
    assert isinstance(data_label, str), 'data_label must be of type str'
    assert isinstance(contour_label, (str,list)), ('contour_label be of '
                                                  'type str')
    assert x2_contour.ndim == x1_contour.ndim,  ('contour must be of' 
            f'equal dimesion got {x2_contour.ndim} and {x1_contour.ndim}')                                                  
    
        
    if x2_contour.ndim == 1:
        x2_contour  = x2_contour.reshape(-1,1) 
        x1_contour = x1_contour.reshape(-1,1) 
    
    N_contours = x2_contour.shape[1]
    
    if contour_label != None:
        if isinstance(contour_label, str):
            contour_label = [contour_label] 
        N_c_labels = len(contour_label)
        assert  N_c_labels == N_contours, ('If specified, the '
             'number of contour lables must be equal to number the '
            f'number of contour years. Got {N_c_labels} and {N_contours}')   
    else:
        contour_label = [None] * N_contours
    
    for i in range(N_contours):       
        ax = _xy_plot(x1_contour[:,i], x2_contour[:,i],'-', 
                      label=contour_label[i], ax=ax)
            
    ax = plt.plot(x1, x2, 'bo', alpha=0.1, 
                  label=data_label) 
    plt.legend(loc='lower right')
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.tight_layout()
    return ax


def plot_compendium(data, buoytitle=None, ax=None):
    """
    Create subplots showing: Significant Wave Height (Hs), Peak Period (Tp), 
    and Direction (Dp) using OPeNDAP service from CDIP THREDDS Server.
    
    See http://cdip.ucsd.edu/themes/cdip?pb=1&bl=cdip?pb=1&d2=p70&u3=s:100:st:1:v:compendium:dt:201204 for example Compendium plot.
    
    Developed based on: http://cdip.ucsd.edu/themes/media/docs/documents/html_pages/compendium.html

    Parameters
    ------------
    data: pandas DataFrame
        Spectral density [m^2/Hz] indexed frequency [Hz]
    buoytitle: string (optional)
        Buoy title from the CDIP THREDDS Server
    ax : matplotlib axes object (optional)
        Axes for plotting.  If None, then a new figure is created.
    Returns
    ---------
    ax : matplotlib pyplot axes

    """

    # Create figure and specify subplot orientation (3 rows, 1 column), shared x-axis, and figure size
    f, (pHs, pTp, pDp) = plt.subplots(3, 1, sharex=True, figsize=(15,10)) 
    
    # Create 3 stacked subplots for three PARAMETERS (Hs, Tp, Dp)
    pHs.plot(data.index,data.Hs,'b')
    pTp.plot(data.index,data.Tp,'b')
    pDp.scatter(data.index,data.Dp,color='blue',s=5) # Plot Dp variable as a scatterplot, rather than line
    
    # Significant Wave Height, Hs
    pHs.tick_params(axis='x', which='major', labelsize=12, top='off')
    # pHs.set_xticklabels(['3','8','13','18','23','28']) 
    pHs.set_ylim(0,8)
    pHs.tick_params(axis='y', which='major', labelsize=12, right='off')
    pHs.set_ylabel('Hs, m', fontsize=18)
    pHs.grid(b=True, which='major', color='b', linestyle='--')
    # Make a second y-axis for the Hs plot, to show values in both meters and feet
    pHs2 = pHs.twinx()
    pHs2.set_ylim(0,25)
    pHs2.set_ylabel('Hs, ft', fontsize=18)
    
    # Peak Period, Tp
    pTp.set_ylim(0,28)
    pTp.set_ylabel('Tp, s', fontsize=18)
    pTp.grid(b=True, which='major', color='b', linestyle='--')
    
    # Direction, Dp 
    pDp.set_ylim(0,360)
    pDp.set_ylabel('Dp, deg', fontsize=18)
    pDp.grid(b=True, which='major', color='b', linestyle='--')
    pDp.set_xlabel('Day', fontsize=18)
    
    # Set x-axis tick interval to every 5 days
    days = matplotlib.dates.DayLocator(interval=5) 
    daysFmt = matplotlib.dates.DateFormatter('%d')
    plt.gca().xaxis.set_major_locator(days)
    plt.gca().xaxis.set_major_formatter(daysFmt)
    
    # Set Titles
    month_name = data.index.month_name()[-1]
    year_num = data.index.year[-1]
    plt.suptitle(buoytitle, fontsize=30) 
    plt.title(month_name + " " + str(year_num), fontsize=20)

    ax = f

    return ax


def plot_boxplot(data, buoytitle=None, ax=None):
    """
    Create plot of monthly-averaged boxes of Significant Wave Height (Hs) data across one year using OPeNDAP service from CDIP THREDDS Server.

    See http://cdip.ucsd.edu/themes/cdip?pb=1&bl=cdip?pb=1&d2=p70&u3=s:093:st:1:v:hs_box_plot:dt:2011 for example Hs Boxplot.

    Developed based on: http://cdip.ucsd.edu/themes/media/docs/documents/html_pages/annualHs_plot.html
    
    Parameters
    ------------
    data: pandas DataFrame
        Spectral density [m^2/Hz] indexed frequency [Hz]
    buoytitle: string (optional)
        Buoy title from the CDIP THREDDS Server
    ax : matplotlib axes object (optional)
        Axes for plotting.  If None, then a new figure is created.
    Returns
    ---------
    ax : matplotlib pyplot axes

    """

    # Create array of month numbers to cycle through to grab Hs data
    months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    year_date = max(data.index.year.unique())
    
    # Create array of month-long chunks of Hs data, to be plotted as a series of 
    # boxplots. Use a for-loop to cycle through the Hs variable and define 
    # each month-long array using the above-specified time index numbers.
    # Calculate the monthly mean (average) using each month-long chunk of data.
    # Calculate the number of instances of the variable being incorporated 
    # into each month-long average
    box_data=[]
    means=[]
    monthlengths=[]
    for imonth in range(len(data.index.month.unique())):
        tmp1 = data[data.index.month == imonth+1]
        tmp2 = data[data.index.month == imonth+1].mean()
        tmp3 = len(data[data.index.month == imonth+1])    
        box_data.append(tmp1)
        means.append(tmp2)
        monthlengths.append(tmp3)
    means = np.array(means)
    meansround = means.round(2)
    
    Jan = box_data[0].Hs
    Feb = box_data[1].Hs
    Mar = box_data[2].Hs
    Apr = box_data[3].Hs
    May = box_data[4].Hs
    Jun = box_data[6].Hs
    Jul = box_data[6].Hs
    Aug = box_data[7].Hs
    Sep = box_data[8].Hs
    Oct = box_data[9].Hs
    Nov = box_data[10].Hs
    Dec = box_data[11].Hs
    
    # Create overall figure and specify size, and grid to specify positions of subplots
    fig = plt.figure(figsize=(12,15)) 
    gs = gridspec.GridSpec(2,2,height_ratios=[5,1]) 
    
    # Create a dataset for sample 'legend' boxplot, to go underneath actual boxplot
    bp_sample2 = np.random.normal(2.5,0.5,500)
    
    # Create two subplots - actual monthly-averaged data (top) and example 'legend' boxplot (bottom)
    # Subplot of monthly-averaged boxplot data
    bp = plt.subplot(gs[0,:])
    bp_data =bp.boxplot([Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec])  
    # Add 'meanlineprops' to include the above-defined properties
    bp.scatter(months,means,marker="_",color='g',linewidths=2.5,s=900) # Overlay monthly means as green lines using 'scatter' function.
    
    # Subplot to show example 'legend' boxplot below actual monthly-averaged boxplot graph
    bp2 = plt.subplot(gs[1,:])
    bp2_example = bp2.boxplot(bp_sample2,vert=False) # Plot horizontal example boxplot with labels
    bp2.scatter(2.3,1,marker="|",color='g',linewidths=2.5,s=400)
        
    # Add values of monthly means as text
    for i, txt in enumerate(meansround):
        bp.annotate(txt, (months[i],means[i]),fontsize=12,horizontalalignment='center',verticalalignment='bottom',color='g')
        
    # Get positions of Median, Quartiles and Outliers to use in 'legend' text labels 
    for line in bp2_example['medians']:
        xm, ym = line.get_xydata()[0] # location of Median line   
    for line in bp2_example['boxes']:
        xb, yb = line.get_xydata()[0] # location of Box edges (Quartiles)
    for line in bp2_example['whiskers']:
        xw, yw = line.get_xydata()[0] # location of Whisker ends (Outliers)    
    
    # Add text labels for 'Median', Mean', '25th/75th %iles' and 'Outliers' to subplot2, to create sample 'legend' boxplot
    bp2.annotate("Median",[xm,ym-0.3*ym],fontsize=14,color='r')
    bp2.annotate("Mean",[2.2,0.65],fontsize=14,color='g')
    bp2.annotate("25%ile",[xb-0.01*xb,yb-0.15*yb],fontsize=12)
    bp2.annotate("75%ile",[xb+0.2*xb,yb-0.15*yb],fontsize=12)
    bp2.annotate("Outliers",[xw+0.38*xw,yw-0.3*yw],fontsize=14,color='r')
    
    # Set colors of box aspects for top subplot    
    pylab.setp(bp_data['boxes'], color='black')
    pylab.setp(bp_data['whiskers'], color='black')
    pylab.setp(bp_data['fliers'], color='r')
    
    # Set colors of box aspects for bottom (sample) subplot   
    pylab.setp(bp2_example['boxes'], color='black')
    pylab.setp(bp2_example['whiskers'], color='black')
    pylab.setp(bp2_example['fliers'], color='r')
    
    # Set Titles
    plt.suptitle(buoytitle, fontsize=30, y=0.97) # Overall plot title using 'buoytitle' variable
    bp.set_title("Significant Wave Height by month for " + str(year_date), fontsize=20, y=1.01) # Subtitle for top plot
    bp2.set_title("Sample Boxplot", fontsize=16, y=1.02) # Subtitle for bottom plot
    
    # Set axes labels and ticks
    bp.set_xticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],fontsize=12)
    bp.set_ylabel('Significant Wave Height, Hs (m)', fontsize=20)
    bp.tick_params(axis='y', which='major', labelsize=12, right='off')
    bp.tick_params(axis='x', which='major', labelsize=12, top='off')
    
    # Create a second row of x-axis labels for top subplot
    newax = bp.twiny()
    newax.xaxis.set_ticks_position('bottom')
    newax.xaxis.set_label_position('bottom')
    newax.spines['bottom'].set_position(('outward',25))
    newax.set_xticklabels(monthlengths,fontsize=10)
    
    # Plot horizontal gridlines onto top subplot
    bp.grid(axis='y', which='major', color='b', linestyle='-', alpha=0.25)
    
    # Remove tickmarks from bottom subplot
    bp2.axes.get_xaxis().set_visible(False)
    bp2.axes.get_yaxis().set_visible(False)

    ax = fig

    return ax


